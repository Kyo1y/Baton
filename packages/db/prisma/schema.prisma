// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  telegramId    String?    @unique
  integrationTokens IntegrationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IntegrationToken {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String   
  access_token      String
  refresh_token     String
  expires_at        Int    
  providerAccountId String?  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, provider])
}

model TrackExternalId {
  id          String         @id @default(cuid())
  canonicalId String
  provider    String
  externalId  String
  canonical   CanonicalTrack @relation(fields: [canonicalId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId])
  @@unique([canonicalId, provider])
}

model CanonicalTrack {
  id          String  @id @default(cuid())
  isrc        String? @unique
  title       String
  artists     String[]
  durationMs  Int
  altKey      String?
  externalIds TrackExternalId[]

  @@unique([altKey])
}

enum TransferStatus {
  RUNNING
  SUCCESS
  PARTIAL
  FAILED
  CANCELED
}

model TransferDraft {
  id                String   @id @default(cuid())
  userId            String   
  source            String
  dest              String
  srcPlaylistId     String
  destPlaylistId    String
  srcPlaylistName   String
  destDraftName     String?
  destDraftIsPublic Boolean?
  destPlaylistName  String?
  status            TransferStatus @default(RUNNING)
  added             Int @default(0)
  failed            Int @default(0)
  errorMessage      String?
  createdAt         DateTime @default(now())

  @@index([userId, source, dest])
  @@index([userId, status, createdAt])
}